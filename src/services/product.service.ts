/* eslint-disable @typescript-eslint/no-explicit-any */
import aqp from 'api-query-params'
import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'
import ProductModel from '~/models/product.model'
import { convertSlugUrl, isExistObject, isValidMongoId } from '~/utils/utils'
import '../models/category.model'
import '../models/brand.model'
import mongoose from 'mongoose'
import ProductVariantModel from '~/models/product-variant.model'
import VariantAttributeModel from '~/models/variant-attribute.model'
import AttributeModel from '~/models/attribute.model'

export interface IAttributeValue {
  name: string
  value: string
}

export interface IVariantAttribute {
  attributeId: string
  variantId: string
  value: string
}

export interface IProductVariant {
  sku: string
  price: number
  stock: number
  image: string
  attributes: IAttributeValue[]
}

export interface IProduct {
  name: string
  slug: string
  price?: number // optional v√¨ c√≥ th·ªÉ ƒë∆∞·ª£c ghi ƒë√® b·ªüi variant
  description?: string
  categoryId?: string // ObjectId
  brandId?: string
  image?: string
  stock?: number
  capacity: number
  variants?: IProductVariant | IProductVariant[]
}

// const handleCreateProduct = async (productData: IProduct) => {
//   const session = await mongoose.startSession()
//   session.startTransaction()
//   try {
//     await isExistObject(
//       ProductModel,
//       { name: productData.name },
//       {
//         checkExisted: true,
//         errorMessage: 'S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i!'
//       }
//     )
//     if (!productData.variants || !Array.isArray(productData.variants)) {
//       const result = await ProductModel.create(
//         [
//           {
//             ...productData,
//             slug: productData?.slug ?? convertSlugUrl(productData.name)
//           }
//         ],
//         { session }
//       )
//       return result[0].toObject()
//     } else {
//       // Create product
//       const result = await ProductModel.create(
//         [
//           {
//             ...productData,
//             slug: productData?.slug ?? convertSlugUrl(productData.name)
//           }
//         ],
//         { session }
//       )

//       const product = result[0]

//       // Create product_variants
//       const variants = productData.variants.map((variantData: IProductVariant) => {
//         return {
//           productId: product._id,
//           sku: variantData.sku,
//           price: variantData.price,
//           stock: variantData.stock,
//           image: variantData.image
//         }
//       })
//       const insertedVariants = await ProductVariantModel.insertMany(variants, { session })
//       console.log('üöÄ ~ handleCreateProduct ~ insertedVariants:', insertedVariants)

//       // Create attributes
//       const attributes: { name: string; slug: string }[] = productData.variants.flatMap((variant: IProductVariant) =>
//         variant.attributes.map((attr: IAttributeValue) => ({
//           name: attr.name,
//           slug: convertSlugUrl(attr.name)
//         }))
//       )
//       const insertedAttributes = await AttributeModel.insertMany(attributes, { session })

//       const arrInsertedAttributes = insertedAttributes.map((attr) => ({
//         attributeId: attr._id,
//         name: attr.name,
//         slug: attr.slug
//       }))

//       // Create variant_attributes
//       const variantAttributes: IVariantAttribute[] = []
//       insertedVariants.forEach((variant, index) => {
//         const variantsArray = productData.variants as IProductVariant[]
//         const attributes = variantsArray[index]?.attributes

//         attributes?.forEach((attr) => {
//           variantAttributes.push({
//             variantId: variant._id as string,
//             attributeId: arrInsertedAttributes[index].attributeId as string,
//             value: (attr as any).value as string
//           })
//         })
//       })

//       await VariantAttributeModel.insertMany(variantAttributes, { session })
//       await session.commitTransaction()
//       session.endSession()

//       return 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!'
//     }
//     // eslint-disable-next-line @typescript-eslint/no-unused-vars
//   } catch (error) {
//     await session.abortTransaction()
//     session.endSession()
//     throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫°o s·∫£n ph·∫©m!')
//   }
// }

const handleCreateProduct = async (productData: IProduct) => {
  // 1. B·∫Øt ƒë·∫ßu session + transaction
  const session = await mongoose.startSession()
  session.startTransaction()
  try {
    // 2. Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i hay ch∆∞a (theo name)
    await isExistObject(
      ProductModel,
      { name: productData.name },
      {
        checkExisted: true,
        errorMessage: 'S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i!'
      }
    )

    // 3. T·∫°o slug n·∫øu ch∆∞a c√≥
    const slug = productData.slug ?? convertSlugUrl(productData.name)

    // 4. T·∫°o product ch√≠nh
    const createdProducts = await ProductModel.create(
      [
        {
          ...productData,
          slug
        }
      ],
      { session }
    )
    const product = createdProducts[0]

    // 5. N·∫øu kh√¥ng c√≥ variants -> commit v√† return lu√¥n
    if (!productData.variants || !Array.isArray(productData.variants) || productData.variants.length === 0) {
      await session.commitTransaction()
      session.endSession()
      // Tr·∫£ v·ªÅ product d·∫°ng Object (lean)
      return product.toObject()
    }

    // 6. N·∫øu c√≥ variants, x·ª≠ l√Ω ti·∫øp:
    // 6.1 T·∫°o c√°c ProductVariant (ch∆∞a include attributes)
    const variantDocs = productData.variants.map((variant: IProductVariant) => ({
      productId: product._id,
      sku: variant.sku,
      price: variant.price,
      stock: variant.stock,
      image: variant.image
    }))
    const createdVariants = await ProductVariantModel.insertMany(variantDocs, { session })

    // 6.2 Chu·∫©n b·ªã danh s√°ch attribute unique
    //   - M·ªói attributeValue c√≥ { name, value }. ·ªû ƒë√¢y ta ch·ªâ quan t√¢m ƒë·∫øn name (ƒë·ªÉ l∆∞u v√†o collection Attribute),
    //     ph·∫ßn ‚Äúvalue‚Äù s·∫Ω l∆∞u ri√™ng trong VariantAttribute.
    //   - D√πng Map ƒë·ªÉ gom theo slug, tr√°nh duplicate.
    interface AttrInfo {
      name: string
      slug: string
    }
    const slugToAttrInfo = new Map<string, AttrInfo>()

    // Ki·ªÉm tra t·ª´ng variant, t·ª´ng attributes trong variant
    productData.variants.forEach((variant: IProductVariant) => {
      ;(variant.attributes || []).forEach((attr: IAttributeValue) => {
        const name = attr.name
        const slugAttr = convertSlugUrl(name)
        if (!slugToAttrInfo.has(slugAttr)) {
          slugToAttrInfo.set(slugAttr, { name, slug: slugAttr })
        }
      })
    })

    // 6.3 Upsert t·∫•t c·∫£ Attribute (c√≥ th·ªÉ d√πng bulkWrite ho·∫∑c loop findOneAndUpdate)
    // D∆∞·ªõi ƒë√¢y l√† c√°ch tu·∫ßn t·ª± cho d·ªÖ hi·ªÉu:
    const slugToAttrId = new Map<string, mongoose.Types.ObjectId>()
    for (const [slugAttr, info] of slugToAttrInfo.entries()) {
      // T√¨m ho·∫∑c t·∫°o m·ªõi
      const attrDoc = await AttributeModel.findOneAndUpdate(
        { slug: slugAttr },
        { $setOnInsert: { name: info.name, slug: info.slug } },
        { upsert: true, new: true, session }
      )
      slugToAttrId.set(slugAttr, attrDoc._id as mongoose.Types.ObjectId)
    }

    // 6.4 X√¢y m·∫£ng variantAttributes: m·ªói variant -> m·ªói attributes (kh√¥ng copy "name" sang AttributeModel n·ªØa, ch·ªâ l∆∞u value)
    const variantAttributesToInsert: IVariantAttribute[] = []
    if (Array.isArray(productData.variants)) {
      createdVariants.forEach((variantDoc, idx) => {
        const originalVariant = (productData.variants as IProductVariant[])[idx]
        ;(originalVariant.attributes || []).forEach((attrVal: IAttributeValue) => {
          const slugAttr = convertSlugUrl(attrVal.name)
          const attributeId = slugToAttrId.get(slugAttr)! // ƒë·∫£m b·∫£o ph·∫£i c√≥

          variantAttributesToInsert.push({
            variantId: variantDoc._id as any,
            attributeId: attributeId as any,
            value: (attrVal as any).value as string
          })
        })
      })
    }

    // 6.5 Insert v√†o VariantAttributeModel
    await VariantAttributeModel.insertMany(variantAttributesToInsert, { session })

    // 7. Commit transaction & k·∫øt th√∫c
    await session.commitTransaction()
    session.endSession()

    return 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!'
  } catch (error) {
    // N·∫øu b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra -> rollback v√† throw
    await session.abortTransaction()
    session.endSession()
    // N√™n log th√™m error g·ªëc (n·∫øu d√πng logger) ƒë·ªÉ d·ªÖ debug
    throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫°o s·∫£n ph·∫©m!')
  }
}

const handleFetchAllProduct = async ({
  currentPage,
  limit,
  qs
}: {
  currentPage: number
  limit: number
  qs: string
}) => {
  const { filter, sort } = aqp(qs)
  delete filter.current
  delete filter.pageSize

  const offset = (+currentPage - 1) * +limit
  const defaultLimit = +limit || 10

  const totalItems = await ProductModel.countDocuments(filter)
  const totalPages = Math.ceil(totalItems / defaultLimit)

  const results = await ProductModel.find(filter)
    .skip(offset)
    .limit(defaultLimit)
    .sort(sort as any)
    .populate({ path: 'categoryId', model: 'Category', select: 'name' })
    .populate({ path: 'brandId', model: 'Brand', select: 'name' })
    .populate({
      path: 'variants',
      model: 'ProductVariant',
      match: { deleted: false },
      populate: {
        path: 'variant_attributes',
        model: 'VariantAttribute',
        select: 'value',
        match: { deleted: false },
        populate: {
          path: 'attributeId',
          model: 'attributes',
          match: { deleted: false },
          select: 'name slug'
        }
      }
    })
    .lean()
    .exec()

  return {
    meta: {
      current: currentPage,
      pageSize: defaultLimit,
      pages: totalPages,
      total: totalItems
    },
    results
  }
}

const handleFetchInfoProduct = async (productId: string) => {
  isValidMongoId(productId)

  const product = await ProductModel.findById(productId)
    .populate({ path: 'categoryId', model: 'Category', select: 'name' })
    .populate({ path: 'brandId', model: 'Brand', select: 'name' })
    .populate({
      path: 'variants',
      model: 'ProductVariant',
      match: { deleted: false },
      populate: {
        path: 'variant_attributes',
        model: 'VariantAttribute',
        select: 'value',
        match: { deleted: false },
        populate: {
          path: 'attributeId',
          model: 'attributes',
          match: { deleted: false },
          select: 'name slug'
        }
      }
    })
    .lean()
    .exec()

  if (!product) {
    throw new ApiError(StatusCodes.NOT_FOUND, 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!')
  }

  return product
}

// const handleUpdateProduct = async (productId: string, data: Partial<IProduct>) => {
//   isValidMongoId(productId)

//   const updated = await ProductModel.updateOne({ _id: productId }, data)
//   if (updated.modifiedCount === 0) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!')
//   }

//   return updated
// }

const handleUpdateProduct = async (productId: string, productData: Partial<IProduct>) => {
  // 1. B·∫Øt ƒë·∫ßu session + transaction
  const session = await mongoose.startSession()
  session.startTransaction()
  try {
    // 2. Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const existingProduct = await ProductModel.findById(productId).session(session)
    if (!existingProduct) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!')
    }

    // 3. N·∫øu user ƒë·ªïi t√™n (ho·∫∑c slug), ph·∫£i ki·ªÉm tra xem name m·ªõi ƒë√£ c√≥ s·∫£n ph·∫©m kh√°c ch∆∞a
    if (productData.name && productData.name !== existingProduct.name) {
      await isExistObject(
        ProductModel,
        { name: productData.name },
        {
          checkExisted: true,
          errorMessage: 'T√™n s·∫£n ph·∫©m m·ªõi tr√πng v·ªõi m·ªôt s·∫£n ph·∫©m ƒë√£ c√≥!'
        }
      )
    }

    // 4. C·∫≠p nh·∫≠t c√°c filed c∆° b·∫£n c·ªßa product (nh∆∞ name, slug, description, v.v.)
    const newSlug = productData.slug ?? convertSlugUrl(productData?.name || '')
    if (typeof productData.name === 'string') {
      existingProduct.name = productData.name
    }
    existingProduct.slug = newSlug
    if (typeof productData.description === 'string') {
      existingProduct.description = productData.description
    }
    // ... c·∫≠p nh·∫≠t nh·ªØng tr∆∞·ªùng kh√°c theo IProduct (v√≠ d·ª• price, category, v.v.) n·∫øu c√≥
    await existingProduct.save({ session })

    // 5. N·∫øu kh√¥ng c√≥ variants ƒë∆∞·ª£c g·ª≠i l√™n (ho·∫∑c m·∫£ng r·ªóng), ta coi l√† ch·ªâ update product ch·ª© kh√¥ng ƒë·ª•ng g√¨ ƒë·∫øn variants
    if (!productData.variants || !Array.isArray(productData.variants) || productData.variants.length === 0) {
      await session.commitTransaction()
      session.endSession()
      return existingProduct.toObject()
    }

    // 6. N·∫øu c√≥ variants, ta ph·∫£i c·∫≠p nh·∫≠t / th√™m / x√≥a b·∫£n ghi ProductVariant, Attribute, VariantAttribute
    // 6.1. L·∫•y t·∫•t c·∫£ variants c≈© hi·ªán c√≥ trong DB cho product n√†y
    const existingVariants = await ProductVariantModel.find({ productId }).session(session)

    // 6.2. Ph√¢n bi·ªát variants s·∫Ω x√≥a, variants s·∫Ω gi·ªØ (update), variants m·ªõi (insert)
    //    - D·ª±a v√†o _id: n·∫øu trong existingVariants m√† _id kh√¥ng c√≥ trong productData.variants, t·ª©c l√† delete
    //    - N·∫øu productData.variants[i]._id t·ªìn t·∫°i, th√¨ m√¨nh s·∫Ω update theo _id ƒë√≥
    //    - N·∫øu productData.variants[i]._id kh√¥ng t·ªìn t·∫°i, t·ª©c l√† variant m·ªõi, ph·∫£i insert

    // 6.2.1. T·∫°o Set ch·ª©a t·∫•t c·∫£ _id variants incoming (string)
    const incomingVariantIds = new Set<string>()
    productData.variants.forEach((v) => {
      if (v._id) incomingVariantIds.add(v._id)
    })

    // 6.2.2. X√°c ƒë·ªãnh variants c·∫ßn x√≥a: variants c≈© c√≥ _id kh√¥ng n·∫±m trong incomingVariantIds
    const variantsToDelete = existingVariants.filter((ev) => !incomingVariantIds.has(ev._id.toString()))

    // 6.2.3. X√°c ƒë·ªãnh variants c≈© c·∫ßn gi·ªØ/update: those c√≥ trong incomingVariantIds
    const variantsToKeep = existingVariants.filter((ev) => incomingVariantIds.has(ev._id.toString()))

    // 6.2.4. X√°c ƒë·ªãnh variants m·ªõi: those incoming m√† kh√¥ng c√≥ _id ho·∫∑c _id kh√¥ng kh·ªõp existing
    const existingVariantIdSet = new Set(existingVariants.map((ev) => ev._id.toString()))
    const variantsToInsert: IProductVariant[] = []
    const variantsToUpdate: IProductVariant[] = [] // s·∫Ω ch·ª©a c·∫£ those c√≥ _id, ƒë·ªÉ update th√¥ng tin

    productData.variants.forEach((inc) => {
      if (inc._id && existingVariantIdSet.has(inc._id)) {
        // Variant n√†y t·ªìn t·∫°i, s·∫Ω update
        variantsToUpdate.push(inc)
      } else {
        // Kh√¥ng c√≥ _id ho·∫∑c kh√¥ng kh·ªõp v·ªõi existing, coi nh∆∞ variant m·ªõi
        variantsToInsert.push(inc)
      }
    })

    // 6.3. Th·ª±c hi·ªán x√≥a c√°c variant kh√¥ng c√≤n trong incoming
    if (variantsToDelete.length > 0) {
      const idsToDelete = variantsToDelete.map((v) => v._id)
      // X√≥a tr∆∞·ªõc variant_attributes li√™n quan
      await VariantAttributeModel.deleteMany({ variantId: { $in: idsToDelete } }, { session })
      // X√≥a variant
      await ProductVariantModel.deleteMany({ _id: { $in: idsToDelete } }, { session })
    }

    // 6.4. Th·ª±c hi·ªán c·∫≠p nh·∫≠t (update) cho c√°c variant c≈©
    for (const incVar of variantsToUpdate) {
      // incVar c√≥ ch·∫Øc _id, t√¨m doc c≈© v√† c·∫≠p nh·∫≠t c√°c field c∆° b·∫£n
      const toUpdate = await ProductVariantModel.findById(incVar._id).session(session)
      if (!toUpdate) {
        // Nguy√™n t·∫Øc: n·∫øu thi·∫øu document c≈©, ta c·∫£nh b√°o l·ªói
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, `Variant _id=${incVar._id} kh√¥ng t√¨m th·∫•y ƒë·ªÉ c·∫≠p nh·∫≠t.`)
      }
      toUpdate.sku = incVar.sku
      toUpdate.price = incVar.price
      toUpdate.stock = incVar.stock
      toUpdate.image = incVar.image
      await toUpdate.save({ session })
      // Ch∆∞a x·ª≠ l√Ω attributes ·ªü ƒë√¢y‚Äîs·∫Ω l√†m chung ·ªü b∆∞·ªõc 6.6
    }

    // 6.5. Th·ª±c hi·ªán ch√®n (insert) cho c√°c variant m·ªõi
    // T·∫°o m·∫£ng document ƒë·ªÉ insert
    const newVariantDocs = variantsToInsert.map((v) => ({
      productId: existingProduct._id,
      sku: v.sku,
      price: v.price,
      stock: v.stock,
      image: v.image
    }))
    let insertedVariants: (mongoose.Document & { _id: mongoose.Types.ObjectId })[] = []
    if (newVariantDocs.length > 0) {
      insertedVariants = await ProductVariantModel.insertMany(newVariantDocs, { session })
    }

    // 6.6. B√¢y gi·ªù x·ª≠ l√Ω ti·∫øp ph·∫ßn Attribute + VariantAttribute cho to√†n b·ªô variants (c≈© + m·ªõi)
    // 6.6.1. T·∫≠p h·ª£p t·∫•t c·∫£ attributes incoming, ƒë·ªÉ upsert v√†o Attribute collection
    // T·∫≠p h·ª£p unique theo slug ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    interface AttrInfo {
      name: string
      slug: string
    }
    const slugToAttrInfo = new Map<string, AttrInfo>()

    productData.variants.forEach((variant) => {
      ;(variant.attributes || []).forEach((attr) => {
        const attrSlug = convertSlugUrl(attr.name)
        if (!slugToAttrInfo.has(attrSlug)) {
          slugToAttrInfo.set(attrSlug, { name: attr.name, slug: attrSlug })
        }
      })
    })

    // 6.6.2. Upsert t·ª´ng Attribute ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ _id cho m·ªói slug
    const slugToAttrId = new Map<string, mongoose.Types.ObjectId>()
    for (const [slugAttr, info] of slugToAttrInfo.entries()) {
      const attrDoc = await AttributeModel.findOneAndUpdate(
        { slug: slugAttr },
        { $setOnInsert: { name: info.name, slug: info.slug } },
        { upsert: true, new: true, session }
      )
      slugToAttrId.set(slugAttr, attrDoc._id as mongoose.Types.ObjectId)
    }

    // 6.6.3. X√≥a h·∫øt VariantAttribute c≈© c·ªßa t·∫•t c·∫£ variants (c≈© l·∫´n m·ªõi) v√¨ ch√∫ng s·∫Ω ƒë∆∞·ª£c insert l·∫°i ho√†n ch·ªânh
    // L·∫•y danh s√°ch ID c·ªßa t·∫•t c·∫£ variants sau update (variantsToKeep + insertedVariants)
    const finalVariantIds = [
      ...variantsToKeep.map((v) => v._id.toString()),
      ...insertedVariants.map((v) => v._id.toString())
    ].map((id) => new mongoose.Types.ObjectId(id))

    if (finalVariantIds.length > 0) {
      await VariantAttributeModel.deleteMany({ variantId: { $in: finalVariantIds } }, { session })
    }

    // 6.6.4. Build l·∫°i m·∫£ng variantAttributes m·ªõi ƒë·ªÉ insert
    const variantAttributesToInsert: Array<{ variantId: string; attributeId: mongoose.Types.ObjectId; value: string }> =
      []

    // - V·ªõi c√°c variants c≈© (variantsToUpdate), m·ªói object incVar c√≥ _id
    for (const incVar of variantsToUpdate) {
      const varId = new mongoose.Types.ObjectId(incVar._id!)
      ;(incVar.attributes || []).forEach((attrVal) => {
        const slugAttr = convertSlugUrl(attrVal.name)
        const attributeId = slugToAttrId.get(slugAttr)!
        variantAttributesToInsert.push({
          variantId: varId.toString(),
          attributeId,
          value: attrVal.value
        })
      })
    }
    // - V·ªõi c√°c variants m·ªõi (insertedVariants), c·∫ßn map d·ª±a v√†o index
    insertedVariants.forEach((doc, idx) => {
      const incVar = variantsToInsert[idx]
      ;(incVar.attributes || []).forEach((attrVal) => {
        const slugAttr = convertSlugUrl(attrVal.name)
        const attributeId = slugToAttrId.get(slugAttr)!
        variantAttributesToInsert.push({
          variantId: doc._id.toString(),
          attributeId,
          value: attrVal.value
        })
      })
    })

    // Cu·ªëi c√πng insert t·∫•t c·∫£
    if (variantAttributesToInsert.length > 0) {
      await VariantAttributeModel.insertMany(variantAttributesToInsert, { session })
    }

    // 7. Commit transaction v√† k·∫øt th√∫c session
    await session.commitTransaction()
    session.endSession()

    return 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!'
  } catch (error) {
    // 8. N·∫øu c√≥ l·ªói, rollback v√† ƒë√≥ng session, sau ƒë√≥ throw ti·∫øp
    await session.abortTransaction()
    session.endSession()

    // N·∫øu l√† ApiError, gi·ªØ nguy√™n message; n·∫øu kh√¥ng, tr·∫£ v·ªÅ l·ªói chung
    if (error instanceof ApiError) {
      throw error
    }
    console.error('handleUpdateProduct error:', error)
    throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh c·∫≠p nh·∫≠t s·∫£n ph·∫©m!')
  }
}

// const handleDeleteProduct = async (productId: string): Promise<any> => {
//   isValidMongoId(productId)

//   const deleted = await ProductModel.deleteById(productId)
//   if (!deleted) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a!')
//   }

//   return deleted
// }

const handleDeleteProduct = async (productId: string): Promise<any> => {
  // 1. B·∫Øt ƒë·∫ßu m·ªôt session ƒë·ªÉ th·ª±c hi·ªán transaction
  const session = await mongoose.startSession()
  session.startTransaction()

  try {
    // 2. Ki·ªÉm tra xem product c√≥ t·ªìn t·∫°i hay kh√¥ng
    const existingProduct = await ProductModel.findById(productId).session(session)
    if (!existingProduct) {
      // N·∫øu kh√¥ng t√¨m th·∫•y, rollback v√† n√©m l·ªói 404
      await session.abortTransaction()
      session.endSession()
      throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a!')
    }

    // 3. T√¨m t·∫•t c·∫£ variants li√™n quan ƒë·∫øn product n√†y
    const variants = await ProductVariantModel.find({ productId: existingProduct._id }).session(session)
    const variantIds = variants.map((v) => v._id)

    // 4. N·∫øu c√≥ variantIds, x√≥a tr∆∞·ªõc c√°c VariantAttribute li√™n quan ƒë·∫øn nh·ªØng variants ƒë√≥
    if (variantIds.length > 0) {
      await VariantAttributeModel.deleteMany({ variantId: { $in: variantIds } }, { session })
      // 5. ƒê·∫øn l∆∞·ª£t x√≥a t·∫•t c·∫£ ProductVariant c·ªßa product
      await ProductVariantModel.deleteMany({ _id: { $in: variantIds } }, { session })
    }

    // 6. Cu·ªëi c√πng, x√≥a ch√≠nh b·∫£n ghi c·ªßa Product
    await ProductModel.delete({ _id: existingProduct._id }, { session })

    // 7. N·∫øu t·∫•t c·∫£ b∆∞·ªõc tr√™n th√†nh c√¥ng, commit transaction
    await session.commitTransaction()
    session.endSession()

    // 8. Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    return { message: 'X√≥a s·∫£n ph·∫©m v√† c√°c bi·∫øn th·ªÉ th√†nh c√¥ng!' }
  } catch (error) {
    // 9. N·∫øu c√≥ l·ªói b·∫•t k·ª≥, rollback v√† n√©m ti·∫øp l·ªói
    await session.abortTransaction()
    session.endSession()

    if (error instanceof ApiError) {
      throw error
    }
    console.error('handleDeleteProduct error:', error)
    throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√≥a s·∫£n ph·∫©m!')
  }
}

export const productService = {
  handleCreateProduct,
  handleFetchAllProduct,
  handleFetchInfoProduct,
  handleUpdateProduct,
  handleDeleteProduct
}
